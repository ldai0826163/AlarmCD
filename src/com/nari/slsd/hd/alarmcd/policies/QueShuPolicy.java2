package com.nari.slsd.hd.alarmcd.policies;

import java.io.ByteArrayInputStream;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

import com.nari.slsd.hd.alarmcd.type.AlarmRecord;
import com.nari.slsd.hd.alarmcd.type.AlarmRecordManager;
import com.nari.slsd.hd.alarmcd.type.SingleDataBase;
import com.nari.slsd.hd.model.WdsHydroElements;
import com.nari.slsd.hd.service.IWdsHisDataService;

/*wjq*/

public class QueShuPolicy extends Policy{
	long senid;
	public long getSenid() {
		return senid;
	}

	public void setSenid(long senid) {
		this.senid = senid;
	}

	public int getDataType() {
		return dataType;
	}

	public void setDataType(int dataType) {
		this.dataType = dataType;
	}

	public int getTimeSpan() {
		return timeSpan;
	}

	public void setTimeSpan(int timeSpan) {
		this.timeSpan = timeSpan;
	}

	int dataType;
	int timeSpan;//数据缺数判断时间要求大于0，实时向前判断时间段，时日月为时间段整点后检查延时分钟
	//	float fgSpan=-1;//成都要求报警复归死区：fgSpan0.2m，越线1m 149-150报警，150-149.8不报警
    String table="rtev";

	public QueShuPolicy() {
		type = PolicyDefine.QueShu;
	}

	public void check(Calendar cal, SingleDataBase db) {
		log.debug("queshu check " +dataType +" "+senid+" begin!");
		AlarmRecord ar = AlarmRecordManager.getRecord(id);

		if (ar.recordTime > cal.getTimeInMillis())
			return;// 不检查旧数据
		Connection conn = db.conn;
		Date endTime = new Date(cal.getTimeInMillis() + 60 * 1000);// 允许报警服务器时间一分钟误差
		Date startTime=null;
		String sql = "";
		String Type = "";
		SimpleDateFormat sdf = new SimpleDateFormat("d日 HH时mm分");

		if (dataType == PolicyDefine.Real) {
			// 实时数据
			sql = "SELECT COUNT(*) from "+table+" WHERE SENID=? AND TIME >= ? AND TIME <?";
			startTime = new Date(cal.getTimeInMillis() - timeSpan * 60 * 1000);
			System.out.println("time"+startTime+table);
		
			Type = "实时数据";
		} else if (dataType == PolicyDefine.Hour) {
			// 小时数据
			int minute = cal.get(Calendar.MINUTE);
			if (( minute) < timeSpan) {
				// 没有到判断的时候
				return;
			}
			Calendar hour = Calendar.getInstance();
			hour.setTimeInMillis(cal.getTimeInMillis());
			hour.set(Calendar.MINUTE, 0);
			hour.set(Calendar.SECOND, 0);
			hour.set(Calendar.MILLISECOND, 0);
			startTime = new Date( hour.getTimeInMillis());
			sql = "SELECT COUNT(*) from HOURDB WHERE SENID=? AND TIME >= ? AND TIME <?";
			Type = "小时数据";
		} else if (dataType == PolicyDefine.Day) {
			// 日数据,开始时间为当日0点

			int hourOfDay = cal.get(Calendar.HOUR_OF_DAY);
			int minute = cal.get(Calendar.MINUTE);
			if ((hourOfDay * 60 + minute) < timeSpan) {
				// 没有到判断的时候
				return;
			}
			Calendar day = Calendar.getInstance();
			day.setTimeInMillis(cal.getTimeInMillis());
			day.set(Calendar.HOUR_OF_DAY, 0);
			day.set(Calendar.MINUTE, 0);
			day.set(Calendar.SECOND, 0);
			day.set(Calendar.MILLISECOND, 0);
			startTime = new Date( day.getTimeInMillis());
			sql = "SELECT COUNT(*) from DAYDB WHERE SENID=? AND TIME >= ? AND TIME <?";
			Type = "日数据";
		} else if (dataType == PolicyDefine.Month) {
			// 月数据,开始时间为当月1日0点

			int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);
			int hourOfDay = cal.get(Calendar.HOUR_OF_DAY);
			int minute = cal.get(Calendar.MINUTE);

			if ((dayOfMonth * 24 * 60 + hourOfDay * 60 + minute) < timeSpan) {
				// 没有到判断的时候
				return;
			}

			Calendar month = Calendar.getInstance();
			month.setTimeInMillis(cal.getTimeInMillis());
			month.set(Calendar.DAY_OF_MONTH, 1);
			month.set(Calendar.HOUR_OF_DAY, 0);
			month.set(Calendar.MINUTE, 0);
			month.set(Calendar.SECOND, 0);
			month.set(Calendar.MILLISECOND, 0);
			startTime = new Date(month.getTimeInMillis());
			sql = "SELECT COUNT(*) from MONTHDB WHERE SENID=? AND TIME >= ? AND TIME <?";
			Type = "月数据";
		} else {
			log.error("报警"+id+"缺数检查Unknow DataType");
			return;
		}

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setLong(1, senid);
			pstmt.setTimestamp(2, new Timestamp(startTime.getTime()));
			pstmt.setTimestamp(3, new Timestamp(endTime.getTime()));
			rs = pstmt.executeQuery();

			int count = 0;
			if (rs.next()) {
				count = rs.getInt(1);
			}
			if (count == 0) {
				log.debug(name + "(" + senid + ")" + Type + "无");
				// 不存在记录则报警
				if (!ar.abnormal
						|| (cal.getTimeInMillis() - ar.recordTime) >= 3600000)// 缺数时间超过1小时再报一次
				{
					ar.abnormal = true;
					ar.recordTime = cal.getTimeInMillis();
					String msg = sdf.format(cal.getTime()) + " " + name /*+"("+senid+")"*/ + Type + "缺数";
					log.info(msg);
					String detail = type + PolicyDefine.Delimiter + senid
							+ PolicyDefine.Delimiter + cal.getTimeInMillis()
							+ PolicyDefine.Delimiter + 1
							+ PolicyDefine.Delimiter + msg;
					sendToDB(cal.getTimeInMillis(), msg, detail);
				}

			} else {
				log.debug(name /*+"("+senid+")"*/+ Type + "有");
				if (ar.abnormal) {
					ar.abnormal = false;
					String msg = sdf.format(cal.getTime()) + " "+ name /* + "("
							+ senid + ")" */+ Type + "恢复";
					log.info(msg);
					String detail = type + PolicyDefine.Delimiter + senid
							+ PolicyDefine.Delimiter + cal.getTimeInMillis()
							+ PolicyDefine.Delimiter + 0
							+ PolicyDefine.Delimiter + msg;
					sendToDB(cal.getTimeInMillis(), msg, detail);
				}
			}
			ar.checkTime = cal.getTimeInMillis();
			try {
				rs.close();
				rs=null;
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			try {
				pstmt.close();
			} catch (Exception e1) {
					e1.printStackTrace();
				}
			log.debug("queshu check " + senid + " end!");
			} catch (Exception e)
			{
				if (rs != null)
					try {
						rs.close();
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				if (pstmt != null)
					try {
						pstmt.close();
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				dealDBException(e, db);
			}

		};
					
					
	public boolean getConfig(byte[]bs) {
		Document doc = null;
		SAXReader saxReader = new SAXReader();	
		
		try {
				doc = saxReader.read(new ByteArrayInputStream(bs/*s.getBytes("UTF-8")*/));
			
			Element root = doc.getRootElement();
			senid=Integer.parseInt(root.element("senid").getStringValue());				
			interval = Integer.parseInt(root.element("interval")
					.getStringValue());
			timeSpan = Integer.parseInt(root.element("timespan")
					.getStringValue());
			dataType = Integer.parseInt(root.element("datatype")
					.getStringValue());
			return true;
		} catch (Exception e) {
			log.info(e.toString());
			e.printStackTrace();
			return false;

		}
	}

	@Override
	public void setName(List lists) {
		for (Iterator it=lists.iterator();it.hasNext();)
		{
			Object one = it.next();
			if (one.getClass().getName().equals("com.nari.slsd.hd.model.WdsHydroElements")) 
			{
				WdsHydroElements mea = (WdsHydroElements) one;
				if (mea.getId() == senid) 
				{
					name = mea.getName();
					switch (mea.getRtdb())
					{
				    case 1:
				    	table="rtdb";
				    	break;
					case 2:
						table="rtsq";
						break;
					case 3:
						table="rtems";
						break;
					case 4:
						table="rtcalc";
						break;
					}
					return;
				}
			}
		}

		name ="测站"+String.valueOf(senid);
	}

	@Override
	public void check(Calendar c, IWdsHisDataService wdsService) {
		// TODO Auto-generated method stub
		
	};

}
